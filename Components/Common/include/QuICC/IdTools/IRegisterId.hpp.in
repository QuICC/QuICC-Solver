/**
 * @file IRegisterId.hpp
 * @brief Register @idID@
 */

#ifndef QUICC_@IDNS@_IREGISTERID_HPP
#define QUICC_@IDNS@_IREGISTERID_HPP

// System includes
//

// External includes
//

// Project includes
//
#include "QuICC/Hasher.hpp"
#include "QuICC/@idNS@/@idID@.hpp"
#include "QuICC/@idNS@/Coordinator.hpp"
#include "QuICC/@idNS@/CreatorImpl.hpp"

namespace QuICC {

@cxxNS@

   /**
    * @brief Register @idID@
    */
   template <typename T> class IRegisterId: public @idID@
   {
      public:
         /**
          * @brief Constructor
          */
         IRegisterId(@_idSIG@@_idCOMMA@const std::string tag);

         /**
          * @brief Destructor
          */
         virtual ~IRegisterId() = default;

         /**
          * @brief Unique id
          */
         static std::size_t id();
      
      protected:

      private:
   };

   /**
    * @brief Register new @idID@
    */
   template <typename T> static std::size_t registerId(const std::string tag);
   template <typename T> static std::size_t registerId(const std::size_t id);

   template <typename T> std::size_t registerId(const std::size_t id)
   {
      std::shared_ptr<CreatorImpl<T> >  spFactory = std::make_shared<CreatorImpl<T> >();

      Coordinator::map().insert(std::make_pair(id,spFactory));

      return id;
   }

   template <typename T> std::size_t registerId(const std::string s)
   {
      std::size_t id = Hasher::makeId(s);
      return registerId<T>(id);
   }

   template <typename T> IRegisterId<T>::IRegisterId(@_idSIG@@_idCOMMA@const std::string tag)
      : @idID@(@idARG@@_idCOMMA@tag)
   {
      registerId<T>(this->hash());
   }

   template <typename T> std::size_t IRegisterId<T>::id()
   {
      static T id;
      return id.hash();
   }

@cxxNS_@
}

#endif // QUICC_@IDNS@_IREGISTERID_HPP
