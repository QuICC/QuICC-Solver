#include <catch2/catch.hpp>
#include <complex>

#include "View/View.hpp"
#include "View/ViewUtils.hpp"
#include "ViewOps/Fourier/Complex/Diff.hpp"
#include "ViewOps/Fourier/Complex/Diff2D.hpp"
@Header@

using namespace QuICC::Memory;
using namespace QuICC::Transform::Fourier;

using mods_t = View<std::complex<double>, DCCSC3D>;

TEST_CASE("Complex Diff 0 Backwards @Tag@", "[ComplexDiff0Bwd@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<DiffOp<mods_t, mods_t, 0, bwd_t>>();

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t m = 0;
    for(; m < M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 2*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 3*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 4*M; ++m)
    {
        modsIn[m] = 1.0;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    CHECK(modsOutV(0,0,0) == modsInV(0,0,0));
    CHECK(modsOutV(1,0,0) == modsInV(1,0,0));
    CHECK(modsOutV(2,1,0) == modsInV(2,1,0));
    CHECK(modsOutV(3,1,0) == modsInV(3,1,0));
    CHECK(modsOutV(4,1,0) == modsInV(4,1,0));
    CHECK(modsOutV(0,0,4) == modsInV(0,0,4));
    CHECK(modsOutV(1,0,4) == modsInV(1,0,4));
    CHECK(modsOutV(2,0,4) == modsInV(2,0,4));
    CHECK(modsOutV(3,0,4) == modsInV(3,0,4));
    CHECK(modsOutV(4,0,4) == modsInV(4,0,4));

}

TEST_CASE("Complex Diff 0 Backwards @Tag@ dealias", "[ComplexDiff0Bwd@Tag@Dealias]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<DiffOp<mods_t, mods_t, 0, bwd_t, dealias_m>>();

    // mods dims
    constexpr std::size_t M = 30;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = M*4;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S, -1000);

    // set input modes
    std::size_t m = 0;
    for(; m < M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 2*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 3*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 4*M; ++m)
    {
        modsIn[m] = 1.0;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    CHECK(modsOutV(0,0,0) == modsInV(0,0,0));
    CHECK(modsOutV(1,0,0) == modsInV(1,0,0));
    CHECK(modsOutV(2,1,0) == modsInV(2,1,0));
    CHECK(modsOutV(3,1,0) == modsInV(3,1,0));
    CHECK(modsOutV(4,1,0) == modsInV(4,1,0));

    // should be zero
    std::complex<double> zeroC = 0.0;
    CHECK(modsOutV(10,1,0) == zeroC);

    CHECK(modsOutV(0,0,4) == modsInV(0,0,4));
    CHECK(modsOutV(1,0,4) == modsInV(1,0,4));
    CHECK(modsOutV(2,0,4) == modsInV(2,0,4));
    CHECK(modsOutV(3,0,4) == modsInV(3,0,4));
    CHECK(modsOutV(4,0,4) == modsInV(4,0,4));

}


TEST_CASE("Complex Diff 0 Forwards @Tag@", "[ComplexDiff0Fwd@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<DiffOp<mods_t, mods_t, 0, fwd_t>>();

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t m = 0;
    for(; m < M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 2*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 3*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 4*M; ++m)
    {
        modsIn[m] = 1.0;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    auto fftScale = 1.0 / static_cast<double>(M);
    CHECK(modsOutV(0,0,0) == modsInV(0,0,0)*fftScale);
    CHECK(modsOutV(1,0,0) == modsInV(1,0,0)*fftScale);
    CHECK(modsOutV(2,1,0) == modsInV(2,1,0)*fftScale);
    CHECK(modsOutV(3,1,0) == modsInV(3,1,0)*fftScale);
    CHECK(modsOutV(4,1,0) == modsInV(4,1,0)*fftScale);
    CHECK(modsOutV(0,0,4) == modsInV(0,0,4)*fftScale);
    CHECK(modsOutV(1,0,4) == modsInV(1,0,4)*fftScale);
    CHECK(modsOutV(2,0,4) == modsInV(2,0,4)*fftScale);
    CHECK(modsOutV(3,0,4) == modsInV(3,0,4)*fftScale);
    CHECK(modsOutV(4,0,4) == modsInV(4,0,4)*fftScale);

}

TEST_CASE("Complex Diff 1 Backwards @Tag@", "[ComplexDiff1Bwd@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<DiffOp<mods_t, mods_t, 1, bwd_t>>();

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t m = 0;
    for(; m < M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 2*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 3*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 4*M; ++m)
    {
        modsIn[m] = 1.0;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    std::complex<double> i(0,1);

    CHECK(modsOutV(0,0,0) == 0.0);
    CHECK(modsOutV(1,0,0) == i);
    CHECK(modsOutV(2,1,0) == 2.0*i);
    CHECK(modsOutV(3,1,0) == -2.0*i);
    CHECK(modsOutV(4,1,0) == -1.0*i);
    CHECK(modsOutV(0,0,4) == 0.0);
    CHECK(modsOutV(1,0,4) == i);
    CHECK(modsOutV(2,0,4) == 2.0*i);
    CHECK(modsOutV(3,0,4) == -2.0*i);
    CHECK(modsOutV(4,0,4) == -1.0*i);

}

TEST_CASE("Complex Diff 1 Backwards Scale@Tag@", "[ComplexDiff1BwdScale@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto domScale = 2.0;
    auto diffOp = std::make_unique<DiffOp<mods_t, mods_t, 1, bwd_t>>(domScale);

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t m = 0;
    for(; m < M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 2*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 3*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 4*M; ++m)
    {
        modsIn[m] = 1.0;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    std::complex<double> i(0,1);

    CHECK(modsOutV(0,0,0) == 0.0);
    CHECK(modsOutV(1,0,0) == domScale*i);
    CHECK(modsOutV(2,1,0) == domScale*2.0*i);
    CHECK(modsOutV(4,1,0) == -domScale*i);
    CHECK(modsOutV(0,0,4) == 0.0);
    CHECK(modsOutV(1,0,4) == domScale*i);
    CHECK(modsOutV(2,0,4) == domScale*2.0*i);
    CHECK(modsOutV(4,0,4) == -domScale*i);

}

TEST_CASE("Complex Diff 1 Forwards @Tag@", "[ComplexDiff1Fwd@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<DiffOp<mods_t, mods_t, 1, fwd_t>>();

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t m = 0;
    for(; m < M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 2*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 3*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 4*M; ++m)
    {
        modsIn[m] = 1.0;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    auto fftScale = 1.0 / static_cast<double>(M);
    std::complex<double> i(0,fftScale);

    CHECK(modsOutV(0,0,0) == 0.0);
    CHECK(modsOutV(1,0,0) == i);
    CHECK(modsOutV(2,1,0) == 2.0*i);
    CHECK(modsOutV(3,1,0) == -2.0*i);
    CHECK(modsOutV(4,1,0) == -1.0*i);
    CHECK(modsOutV(0,0,4) == 0.0);
    CHECK(modsOutV(1,0,4) == i);
    CHECK(modsOutV(2,0,4) == 2.0*i);
    CHECK(modsOutV(3,0,4) == -2.0*i);
    CHECK(modsOutV(4,0,4) == -1.0*i);

}

TEST_CASE("Complex Diff 1 Zero mode P Forwards @Tag@", "[ComplexDiff1FwdZeroP@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<DiffOp<mods_t, mods_t, 1, fwd_t, zeroP_m>>();

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t m = 0;
    for(; m < M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 2*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 3*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 4*M; ++m)
    {
        modsIn[m] = 1.0;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    auto fftScale = 1.0 / static_cast<double>(M);
    std::complex<double> i(0,fftScale);

    CHECK(modsOutV(0,0,0) == modsInV(0,0,0)*fftScale);
    CHECK(modsOutV(1,0,0) == i);
    CHECK(modsOutV(2,1,0) == 2.0*i);
    CHECK(modsOutV(3,1,0) == modsInV(3,1,0)*fftScale);
    CHECK(modsOutV(4,1,0) == -1.0*i);
    CHECK(modsOutV(0,0,4) == 0.0);
    CHECK(modsOutV(1,0,4) == i);
    CHECK(modsOutV(2,0,4) == 2.0*i);
    CHECK(modsOutV(3,0,4) == -2.0*i);
    CHECK(modsOutV(4,0,4) == -1.0*i);

}

TEST_CASE("Complex Diff 2 Backwards @Tag@", "[ComplexDiff2Bwd@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<DiffOp<mods_t, mods_t, 2, bwd_t>>();

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t m = 0;
    for(; m < M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 2*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 3*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 4*M; ++m)
    {
        modsIn[m] = 1.0;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    std::complex<double> cOne(1,0);

    CHECK(modsOutV(0,0,0) == 0.0);
    CHECK(modsOutV(1,0,0) == -cOne);
    CHECK(modsOutV(2,1,0) == -2.0*2.0*cOne);
    CHECK(modsOutV(3,1,0) == -2.0*2.0*cOne);
    CHECK(modsOutV(4,1,0) == -cOne);
    CHECK(modsOutV(0,0,4) == 0.0);
    CHECK(modsOutV(1,0,4) == -cOne);
    CHECK(modsOutV(2,0,4) == -2.0*2.0*cOne);
    CHECK(modsOutV(3,0,4) == -2.0*2.0*cOne);
    CHECK(modsOutV(4,0,4) == -cOne);

}

TEST_CASE("Complex Diff 2 Backwards Scale@Tag@", "[ComplexDiff2BwdScale@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<DiffOp<mods_t, mods_t, 2, bwd_t>>(2.0);

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t m = 0;
    for(; m < M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 2*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 3*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 4*M; ++m)
    {
        modsIn[m] = 1.0;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    std::complex<double> cOne(1,0);

    CHECK(modsOutV(0,0,0) == 0.0);
    CHECK(modsOutV(1,0,0) == -2.0*2.0*cOne);
    CHECK(modsOutV(2,1,0) == -4.0*4.0*cOne);
    CHECK(modsOutV(4,1,0) == -2.0*2.0*cOne);
    CHECK(modsOutV(0,0,4) == 0.0);
    CHECK(modsOutV(1,0,4) == -2.0*2.0*cOne);
    CHECK(modsOutV(2,0,4) == -4.0*4.0*cOne);
    CHECK(modsOutV(4,0,4) == -2.0*2.0*cOne);

}


TEST_CASE("Complex Diff 3 Backwards @Tag@", "[ComplexDiff3Bwd@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<DiffOp<mods_t, mods_t, 3, bwd_t>>();

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t m = 0;
    for(; m < M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 2*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 3*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 4*M; ++m)
    {
        modsIn[m] = 1.0;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    std::complex<double> i(0,1);

    CHECK(modsOutV(0,0,0) == 0.0);
    CHECK(modsOutV(1,0,0) == -i);
    CHECK(modsOutV(2,1,0) == -2.0*2.0*2.0*i);
    CHECK(modsOutV(3,1,0) == 2.0*2.0*2.0*i);
    CHECK(modsOutV(4,1,0) == i);
    CHECK(modsOutV(0,0,4) == 0.0);
    CHECK(modsOutV(1,0,4) == -i);
    CHECK(modsOutV(2,0,4) == -2.0*2.0*2.0*i);
    CHECK(modsOutV(3,0,4) == 2.0*2.0*2.0*i);
    CHECK(modsOutV(4,0,4) == i);

}

TEST_CASE("Complex Diff 4 Backwards @Tag@", "[ComplexDiffBwd4@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<DiffOp<mods_t, mods_t, 4, bwd_t>>();

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t m = 0;
    for(; m < M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 2*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 3*M; ++m)
    {
        modsIn[m] = 1.0;
    }
    for(; m < 4*M; ++m)
    {
        modsIn[m] = 1.0;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    std::complex<double> cOne(1,0);

    CHECK(modsOutV(0,0,0) == 0.0);
    CHECK(modsOutV(1,0,0) == cOne);
    CHECK(modsOutV(2,1,0) == 2.0*2.0*2.0*2.0*cOne);
    CHECK(modsOutV(3,1,0) == 2.0*2.0*2.0*2.0*cOne);
    CHECK(modsOutV(4,1,0) == cOne);
    CHECK(modsOutV(0,0,4) == 0.0);
    CHECK(modsOutV(1,0,4) == cOne);
    CHECK(modsOutV(2,0,4) == 2.0*2.0*2.0*2.0*cOne);
    CHECK(modsOutV(3,0,4) == 2.0*2.0*2.0*2.0*cOne);
    CHECK(modsOutV(4,0,4) == cOne);

}

TEST_CASE("Complex Diff 2D Backwards 2002 @Tag@", "[ComplexDiff2DBwd2002@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<Diff2DOp<mods_t, mods_t, 2, 0, 0, 2, bwd_t>>();

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t i = 0;
    for(; i < M; ++i)
    {
        modsIn[i] = 1.0;
    }
    for(; i < 2*M; ++i)
    {
        modsIn[i] = 0.5;
    }
    for(; i < 3*M; ++i)
    {
        modsIn[i] = 0.25;
    }
    for(; i < 4*M; ++i)
    {
        modsIn[i] = 0.125;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    std::complex<double> c(-1,0);

    CHECK(modsOutV(0,0,0) == 0.0);
    CHECK(modsOutV(1,0,0) == c);
    CHECK(modsOutV(2,1,0) == 2.0*c);
    CHECK(modsOutV(3,0,4) == 2.5*c);
    CHECK(modsOutV(4,0,4) == 2.125*c);

}

TEST_CASE("Complex Diff 2D Forwards 2002 @Tag@", "[ComplexDiff2DFwd2002@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<Diff2DOp<mods_t, mods_t, 2, 0, 0, 2, fwd_t>>();

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t i = 0;
    for(; i < M; ++i)
    {
        modsIn[i] = 1.0;
    }
    for(; i < 2*M; ++i)
    {
        modsIn[i] = 0.5;
    }
    for(; i < 3*M; ++i)
    {
        modsIn[i] = 0.25;
    }
    for(; i < 4*M; ++i)
    {
        modsIn[i] = 0.125;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    auto fftScale = 1.0 / static_cast<double>(M);
    std::complex<double> c(-fftScale,0);

    CHECK(modsOutV(0,0,0) == 0.0);
    CHECK(modsOutV(1,0,0) == c);
    CHECK(modsOutV(2,1,0) == 2.0*c);
    CHECK(modsOutV(3,0,4) == 2.5*c);
    CHECK(modsOutV(4,0,4) == 2.125*c);

}

TEST_CASE("Complex Inverse Diff 2D Forwards 2002 @Tag@", "[ComplexInvDiff2DFwd2002@Tag@]")
{
    using namespace QuICC::Transform::Fourier::Complex::@Tag@;

    auto diffOp = std::make_unique<Diff2DOp<mods_t, mods_t, 2, 0, 0, 2, fwd_t, inverse_m>>();

    // mods dims
    constexpr std::size_t M = 5;
    constexpr std::size_t N = 3;
    constexpr std::size_t K = 5;
    std::array<std::uint32_t, 3> dimensions {M, N, K};

    // mods storage
    constexpr std::size_t S = 20;
    std::vector<typename mods_t::ScalarType> modsIn(S);
    std::vector<typename mods_t::ScalarType> modsOut(S);

    // set input modes
    std::size_t i = 0;
    for(; i < M; ++i)
    {
        modsIn[i] = 1.0;
    }
    for(; i < 2*M; ++i)
    {
        modsIn[i] = 0.5;
    }
    for(; i < 3*M; ++i)
    {
        modsIn[i] = 0.25;
    }
    for(; i < 4*M; ++i)
    {
        modsIn[i] = 0.125;
    }

    // host view
    std::array<std::vector<std::uint32_t>, 3> pointers {{{},{0, 2, 2, 2, 3, 4},{}}};
    std::array<std::vector<std::uint32_t>, 3> indices {{{},{0, 1, 0, 0},{}}};
    mods_t modsInV({modsIn.data(), modsIn.size()}, dimensions, pointers, indices);
    mods_t modsOutV({modsOut.data(), modsOut.size()}, dimensions, pointers, indices);

    @View3D@

    // apply
    diffOp->apply(modsOutV, modsInV);

    @CopyBack3D@

    // check
    auto fftScale = 1.0 / static_cast<double>(M);
    std::complex<double> c(-fftScale,0);

    double eps = 10.0*std::numeric_limits<double>::epsilon();
    CHECK(modsOutV(0,0,0) == 0.0);
    CHECK(modsOutV(1,0,0) == c);
    CHECK(std::abs(modsOutV(2,1,0) - 0.125*c) < eps);
    CHECK(std::abs(modsOutV(3,0,4) - 0.00625*c) < eps);
    CHECK(std::abs(modsOutV(4,0,4) - 0.007352941176470588*c) < eps);

}
