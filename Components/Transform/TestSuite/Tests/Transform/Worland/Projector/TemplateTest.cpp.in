/**
 * @file @Operator@Test.cpp
 * @brief Tests for the Worland based @Operator@ projector
 */


// Configuration includes
//

// System includes
//
#include <catch2/catch.hpp>

// Project includes
//
#include "QuICC/TestSuite/Transform/Worland/TestArgs.hpp"
#include "QuICC/TestSuite/Transform/Worland/Tester.hpp"
#include "QuICC/Transform/@Algorithm@/Worland/Projector/@Operator@.hpp"

namespace currentts = ::QuICC::TestSuite::Transform::Worland;

TEST_CASE( "@Algorithm@::Error for @Operator@@Template@ projector", "[@CatchTestName@]" ){

   // Set default arguments if required
   if(currentts::args().useDefault)
   {
      currentts::args().params = {0,1,2};
   }

   Catch::StringMaker<double>::precision = 15;

   // Set type
   currentts::args().setType("@type@");

   REQUIRE( (currentts::args().type == ::QuICC::TestSuite::Transform::TestType::PROJECTOR && "Test type is projector") );
   REQUIRE( currentts::args().params.size() > 0 );

   // Typedef for used operator
   using namespace ::QuICC::Transform::@Algorithm@::Worland;
   typedef Projector::@Operator@@Template@ Projector;
   typedef typename currentts::Tester<Projector> Tester;

   Tester tester("@Operator@.dat", currentts::args().dumpData);
   tester.setUlp(currentts::args().ulp);
   tester.setIter(currentts::args().iter);

   Tester::ParameterType params = {-1};

   if(currentts::args().np > 0)
   {
      params.push_back(currentts::args().np);
      params.push_back(currentts::args().rank);
   }

   for(auto id: currentts::args().params)
   {
      params.at(0) = id;
      tester.validate(params, currentts::args().type, currentts::args().timeOnly);
   }

}
