/**
 * @file @Operator@Test.cpp
 * @brief Tests for the Fourier based mixed @Operator@ transform loop
 */


// Configuration includes
//

// System includes
//
#include <catch2/catch.hpp>

// Project includes
//
#include "QuICC/TestSuite/Transform/Fourier/TestArgs.hpp"
#include "QuICC/TestSuite/Transform/Fourier/Tester.hpp"
#include "QuICC/Transform/Fft/Fourier/@Space@/Integrator/P.hpp"
#include "QuICC/Transform/Fft/Fourier/@Space@/Projector/@Operator@.hpp"

namespace currentts = ::QuICC::TestSuite::Transform::Fourier;

TEST_CASE( "@Space@::Error for @Operator@ backward-forward loop", "[@Space@::@Operator@:@type@]" ){

   // Set default arguments if required
   if(currentts::args().useDefault)
   {
      currentts::args().params = {0,1,2};
   }

   Catch::StringMaker<double>::precision = 15;

   // Set type
   currentts::args().setType("@type@");

   REQUIRE( (currentts::args().type == ::QuICC::TestSuite::Transform::TestType::BFLOOP && "Test type is bfloop") );
   REQUIRE( currentts::args().params.size() > 0 );

   // Typedef for used operator
   typedef ::QuICC::Transform::Fft::Fourier::@Space@::Projector::@Operator@ Projector;
   typedef ::QuICC::Transform::Fft::Fourier::@Space@::Integrator::P Integrator;
   typedef typename currentts::Tester<Projector,Integrator> Tester;

   Tester tester("@Operator@.dat", currentts::args().dumpData);
   tester.setUlp(currentts::args().ulp);

   Tester::ParameterType params = {-1};

   for(int id: currentts::args().params)
   {
      params.at(0) = id;
      tester.validate(params, currentts::args().type);
   }

}
