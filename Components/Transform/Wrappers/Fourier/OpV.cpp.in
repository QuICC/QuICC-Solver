/**
 * @file @Op@.cpp
 * @brief Wrapper of the Fourier @Space@ @Op@ @Kind@
 */
#include "QuICC/Transform/Wrappers/Fourier/@Space@/@Kind@/@Op@@Tag@.hpp.inc"
// #include "Fft/Fft.hpp"
#include "Memory/Cpu/NewDelete.hpp"
#include "ViewOps/Fourier/Util.hpp"
#include "ViewOps/Fourier/@Space@/OpsType.hpp"
#include "ViewOps/Fourier/Tags.hpp"
@CppHeader@
@CuHeader@
#include "Profiler/Interface.hpp"

namespace QuICC {
namespace Transform {
namespace Fft {
namespace Fourier {
namespace @Space@ {
namespace @Kind@ {

using namespace QuICC::View;

void @Op@<@Tag@>::initBackend() const
{
    auto bwdSize = mspSetup->bwdSize();
    auto blockSize = mspSetup->blockSize();

    // Alloc padded temporary storage
    mPadded.setZero(bwdSize, blockSize);

    // Make operators
    using namespace QuICC::Transform::Fourier;
    using namespace QuICC::Transform::Fourier::@Space@;

    auto mem = std::make_shared<QuICC::Memory::@MemRes@>();
    using op_t = OpsType<@ArgOutType@, @ArgInType@, @Op@_t, @OpDirection@, Transform::Fourier::@Tag@>;
    mOp = std::make_unique<op_t>(@Mem@);

    @Alloc@
}

void @Op@<@Tag@>::transform(@OutMatrixType@& rOut, const @InMatrixType@& in) const
{
    Profiler::RegionFixture<2> fix("@Op@<@Tag@>::transform");

    using namespace QuICC::Transform::Fourier;

    @CopyPad@

    @IndicesPointers@

    @ViewStorage@

    mOp->apply(@Args@);

    @CopyBack@
}

} // namespace @Kind@
} // namespace @Space@
} // namespace Fourier
} // namespace Fft
} // namespace Transform
} // namespace QuICC
