/**
 * @file @Scheme@CommunicatorTest.cpp
 * @brief Tests for the communiator
 */


// Configuration includes
//

// System includes
//
#include <catch2/catch.hpp>
#include <fstream>

// Project includes
//
#include "QuICC/Enums/Dimensions.hpp"
#include "QuICC/Enums/FieldIds.hpp"
#include "Environment/QuICCEnv.hpp"
#include "QuICC/Resolutions/Resolution.hpp"
#include "QuICC/SpatialScheme/3D/@Scheme@.hpp"
#include "QuICC/PhysicalNames/registerAll.hpp"
#include "QuICC/Arithmetics/registerAll.hpp"
#include "QuICC/TestSuite/Framework/Communicators/TestArgs.hpp"
#include "QuICC/TestSuite/Framework/Communicators/TestHelper.hpp"

namespace currentts = ::QuICC::TestSuite::Framework::Communicators;

TEST_CASE( "Communicator initialization for @Scheme@", "[@Scheme@]" ){

   // Init Environment
   QuICC::QuICCEnv();
   #ifdef QUICC_MPI
      {
         int size;
         MPI_Comm_size(MPI_COMM_WORLD, &size);
         QuICC::QuICCEnv().setup(size);
      }
   #else
      QuICC::QuICCEnv().setup(1);
   #endif

   // Register IDs
   QuICC::PhysicalNames::registerAll();
   QuICC::Arithmetics::registerAll();

   Catch::StringMaker<double>::precision = 15;

   QuICC::ArrayI dim = currentts::processCmdLine();

   currentts::Test test;
   QuICC::Parallel::SplittingDescription::store = true;

   // convert factor vector to list
   std::list<int> factorList(currentts::args().factors.begin(), currentts::args().factors.end());

   // Create LoadSplitter, SpatialScheme and generate resolution
   auto best = currentts::initResolution<QuICC::SpatialScheme::@Scheme@>(dim, currentts::args().algorithm, currentts::args().grouper, factorList);
   test.spRes = best.first;
   auto&& descr = best.second;

   // Create communicator
   currentts::initCommunicator(test, descr);

   currentts::setupSpectralCommunication(test);

   // Spectral/1D space transpose
   currentts::transposeSpectral_1D(test);

   // Initialize MPI communication for 1D/2D and 2D/3D transpose
   currentts::setup1D2D3DCommunication(test);

   // 1D/2D transpose
   currentts::transpose1D_2D(test);

   // 2D/3D transpose
   currentts::transpose2D_3D(test);
}
