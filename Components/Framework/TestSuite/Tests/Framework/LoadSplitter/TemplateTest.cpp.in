/**
 * @file @Scheme@SplittingTest.cpp
 * @brief Tests for the @Scheme@ load splitting
 */

// System includes
//
#include <catch2/catch.hpp>
#include <fstream>

// Project includes
//
#include "QuICC/Enums/Dimensions.hpp"
#include "QuICC/Enums/Splitting.hpp"
#include "Environment/QuICCEnv.hpp"
#include "QuICC/LoadSplitter/LoadSplitter.hpp"
#include "QuICC/Resolutions/Resolution.hpp"
#include "QuICC/SpatialScheme/3D/@Scheme@.hpp"
#include "QuICC/Enums/GridPurpose.hpp"
#include "QuICC/Enums/VectorFormulation.hpp"
#include "QuICC/Transform/Setup/Default.hpp"
#include "QuICC/TestSuite/Framework/LoadSplitter/TestArgs.hpp"
#include "QuICC/TestSuite/Framework/LoadSplitter/TestHelper.hpp"
#include "QuICC/SpatialScheme/Tools/SpectralTriangularSH.hpp"
#include "QuICC/SpatialScheme/Tools/SpectralTrapezoidalSH.hpp"

namespace currentts = ::QuICC::TestSuite::Framework::LoadSplitter;

TEST_CASE( "@Scheme@ splitting tests", "[@Scheme@]" ){
   // Init Environment
   QuICC::QuICCEnv();

   // Set default arguments if required
   if(currentts::args().useDefault)
   {
      currentts::args().op = "P";
      if(currentts::args().db == 0)
      {
         currentts::args().db = 108;
      }
      if(currentts::args().np == 0)
      {
         currentts::args().np = 8;
      }
      currentts::args().dim1D = 0;

      currentts::args().params.clear();
      currentts::args().params.push_back(0);
      auto np = currentts::args().np;
      currentts::args().params.push_back((np-1)/2);
      currentts::args().params.push_back(np-1);

      if(currentts::args().truncation == "")
      {
         currentts::args().truncation = "uniform";
      }
   }
   else
   {
      if(currentts::args().db < 1 || currentts::args().np < 1)
      {
         throw std::logic_error("At least database ID (--db) and number of nodes (--np) need to be given");
      }
   }

   // Compute all ranks
   if(currentts::args().params.size() == 1 && currentts::args().params.at(0) == currentts::args().np)
   {
      currentts::args().params.clear();
      for(unsigned int i = 0; i < currentts::args().np; i++)
      {
         currentts::args().params.push_back(i);
      }
   }

   int dbId = currentts::args().db - 100;
   if((currentts::args().dim1D == 0) && (dbId > 0) && (dbId < 20))
   {
      unsigned int nM = std::pow(2,dbId);
      currentts::args().dim1D = nM/2 - 1;
      currentts::args().dim2D = nM - 1;
      currentts::args().dim3D = nM - 1;

      if(currentts::args().truncation == "triangular")
      {
         QuICC::SpatialScheme::Tools::SpectralTriangularSH t;

         currentts::args().dim1D = currentts::args().dim2D/2 + t.min() - 1;
      }
      else if(currentts::args().truncation == "trapezoidal")
      {
         QuICC::SpatialScheme::Tools::SpectralTrapezoidalSH t;

         currentts::args().dim1D = currentts::args().dim2D/2 + t.min() - 1;
      }
   }

   if(currentts::args().dim1D == 0 || currentts::args().dim2D == 0 || currentts::args().dim3D == 0)
   {
      throw std::logic_error("Dimensions are not set properly");
   }

   bool testAllRanks = (currentts::args().params.size() == currentts::args().np);

   bool checkRanks = currentts::args().checkRanks;

   // Get splitting stage
   QuICC::Dimensions::Transform::Id stageId = static_cast<QuICC::Dimensions::Transform::Id>(currentts::args().stage);

   Catch::StringMaker<double>::precision = 15;

   const auto& op = currentts::args().op;
   const auto& db = currentts::args().db;
   const auto& np = currentts::args().np;
   QuICC::ArrayI dim(3);
   dim(0) = currentts::args().dim1D;
   dim(1) = currentts::args().dim2D;
   dim(2) = currentts::args().dim3D;

   // convert factor vector to list
   std::list<int> factorList(currentts::args().factors.begin(), currentts::args().factors.end());

   // Create LoadSplitter, SpatialScheme and generate resolution
   std::vector<std::size_t> opt1D;
   if(currentts::args().truncation == "uniform")
   {
      opt1D.push_back(QuICC::Transform::Setup::Default::id());
   }
   else if(currentts::args().truncation == "triangular")
   {
      opt1D.push_back(QuICC::Transform::Setup::GaussianQuadrature::id());
      opt1D.push_back(QuICC::Transform::Setup::Triangular::id());

      currentts::args().db += 1000;
   }
   else if(currentts::args().truncation == "trapezoidal")
   {
      opt1D.push_back(QuICC::Transform::Setup::GaussianQuadrature::id());
      opt1D.push_back(QuICC::Transform::Setup::Trapezoidal::id());

      currentts::args().db += 2000;
   }
   else
   {
      throw std::logic_error("Unknown 1D transform implementation");
   }

   std::multimap<int,int> modes;
   for(int id: currentts::args().params)
   {
      std::string grouper = "transform";

      auto best = currentts::initResolution<QuICC::SpatialScheme::@Scheme@>(id, np, dim, currentts::args().algorithm, grouper, factorList, opt1D);
      auto spRes = best.first;

      std::cerr << "Selectd factors: " << best.second.factors.transpose() << std::endl;

      auto& tRes = *spRes->cpu()->dim(stageId);
      currentts::SimRes sRes;
      QuICC::Dimensions::Simulation::Id simId;
      if(stageId != QuICC::Dimensions::Transform::SPECTRAL)
      {
         simId = static_cast<QuICC::Dimensions::Simulation::Id>(static_cast<int>(stageId));
      }
      else
      {
         simId = QuICC::Dimensions::Simulation::SIM1D;
      }
      sRes.nSpec = spRes->sim().dim(simId, QuICC::Dimensions::Space::SPECTRAL);
      sRes.nPhys = spRes->sim().dim(simId, QuICC::Dimensions::Space::PHYSICAL);

      // filename and path data
      std::string algoPrefix;
      if(best.second.algorithm == QuICC::Splitting::Algorithms::SERIAL)
      {
         algoPrefix = "Serial/";
      }
      else if(best.second.algorithm == QuICC::Splitting::Algorithms::SINGLE1D)
      {
         algoPrefix = "Single1D/";
      }
      else if(best.second.algorithm == QuICC::Splitting::Algorithms::SINGLE2D)
      {
         algoPrefix = "Single2D/";
      }
      else if(best.second.algorithm == QuICC::Splitting::Algorithms::TUBULAR)
      {
         algoPrefix = "Tubular/";
      }
      const std::string refPrefix =  "_refdata/Framework/LoadSplitter/@Scheme@/" + algoPrefix;
      const std::string dataPrefix =  "_data/Framework/LoadSplitter/@Scheme@/" + algoPrefix;
      std::stringstream ss;
      ss << "_id" << db;
      ss << "_np" << np;
      ss << "_r" << id;
      ss << "_stage" << static_cast<int>(stageId);
      std::string fname = op + ss.str() + "_meta.dat";

      // Check data against reference
      std::string path = refPrefix + fname;
      currentts::collectModes(tRes, modes);
      if(checkRanks)
      {
         currentts::checkReference(path, sRes, tRes);
      }

      if(currentts::args().dumpData)
      {
         path = dataPrefix + fname;
         currentts::writeData(path, sRes, tRes);
      }
   }

   // If all ranks are computed, check against serial reference
   if(testAllRanks)
   {
      const std::string refPrefix =  "_refdata/Framework/LoadSplitter/@Scheme@/Serial/";
      std::stringstream ss;
      ss << "_id" << db;
      ss << "_np" << 1;
      ss << "_r" << 0;
      ss << "_stage" << static_cast<int>(stageId);
      std::string fname = op + ss.str() + "_meta.dat";

      // Check data against serial reference
      std::string path = refPrefix + fname;
      currentts::checkSerialReference(path, modes);
   }
}
