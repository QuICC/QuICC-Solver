# Depend on CSCS official spack base container helpers
FROM docker.io/finkandreas/spack:0.20.2-cuda11.7.1-ubuntu22.04 as builder

ARG NUM_PROCS=16

# use spack-install-helper that has all the spack boilerplate
# First argument is the target machine, the rest are spack specs
# Performance tests require at least reframe@4.3.0
RUN spack-install-helper \
    daint-gpu \
    fftw \
    hdf5 \
    cmake \
    openblas \
    "boost@1.78.0" \
    "kokkos +wrapper +cuda_lambda" \
    py-scipy \
    kokkos-kernels \
    "reframe@develop"

# Bare OS image to run the installed executables
FROM docker.io/finkandreas/spack:base-cuda11.7.1-ubuntu22.04

# it is important to keep the paths, otherwise your installation is broken
# all these paths are created with the above `spack-install-helper` invocation
COPY --from=builder /opt/spack-environment /opt/spack-environment
COPY --from=builder /opt/software /opt/software
COPY --from=builder /opt/._view /opt/._view
COPY --from=builder /etc/profile.d/z10_spack_environment.sh /etc/profile.d/z10_spack_environment.sh

RUN fix_spack_install

RUN apt-get -yqq update && apt-get -yqq upgrade \
 && apt-get -yqq install build-essential git gcc g++ gfortran vim less
#  \
#  && rm -rf /var/lib/apt/lists/*

RUN apt-get -yqq install lsb-release wget \
 software-properties-common gnupg

RUN wget https://apt.llvm.org/llvm.sh \
 && chmod +x llvm.sh \
 && ./llvm.sh 17

RUN apt-get -yqq install libmlir-17-dev mlir-17-tools

# sanity check that nvcc_wrapper is a symbolic link in the view and set default nvcc_wrapper compile options
RUN ( test -L /opt/view/bin/nvcc_wrapper && \
      sed -i -e 's/default_arch="sm_35"/default_arch="sm_60"/' \
             -e 's/DEFAULT_COMPILER:-"g++"/DEFAULT_COMPILER:-"mpic++"/' \
             -e 's/^cuda_args=""$/cuda_args="--extended-lambda"/' \
             $(find /opt/software -name nvcc_wrapper) \
    ) \
  || ( echo "/opt/view/bin/nvcc_wrapper must be a symbolic link" && exit 1 )

# set env var to init CMAKE_CUDA_ARCHITECTURES
ENV CUDAARCHS 60

